КОНТРОЛЬ УСПЕВАЕМОСТИ И ПОСЕЩАЕМОСТИ

Работа студента в течение семестра оценивается числом баллов от 0 до 5,
которое является средним арифметическим следующих баллов, округленным вверх.

	Посещаемость семинарских занятий
        	6 или менее занятий	– 0 баллов
		7 или 8 		– 1 балл
		9 или 10 		– 2 балла
		11 или 12 		– 3 балла
		13 или 14 		– 4 балла
		15 и более 		- 5 баллов
	Домашние задания
		Любые 4 задачи, заданные на дом, -- от 0 до 5 баллов за задачу
	Лабораторные работы
		Любые 7 (в 1м семестре) или (6 во 2м семестре) лабораторных работ
		лабораторные работы, сданные через <= 14 дней после сдачи
		предыдущей лабораторной работы
			сигнатура совпадает с сигнатурой уже сданного решения – 0 баллов
			менее 1/2 тестов		– 2+БОНУС балла
			не менее 1/2 и менее 3/4 тестов – 3+БОНУС балла
			не менее 3/4 и менее 4/4 тестов – 4+БОНУС балла
			все тесты			– 5+БОНУС баллов
		лабораторные работы, сданные через N >= 3 недели после сдачи
		предыдущей лабораторной работы
			сигнатура совпадает с сигнатурой уже сданного решения – 0 баллов
			менее 1/2 тестов 		– 2+БОНУС-N баллов
			не менее 1/2 и менее 3/4 тестов – 3+БОНУС-N баллов
			не менее 3/4 и менее 4/4 тестов – 4+БОНУС-N баллов
			все тесты 			– 5+БОНУС-N баллов
		несданные лабораторные работы -- 0 баллов

	БОНУС за (не-)правильное оформление лабораторных работ
		–1 балл за каждую глобальную переменную
		–1 балл за каждое использование стандартных функций (например, malloc и fopen)
			без проверки результата на правильность
		–1 балл за каждый пропущенный free, fclose и т.п.
		–1 балл за использование пробельных символов и комментариев без системы
			(нет отступов, смесь разных стилей, мусорный код в комментариях и т.п.)
		–1 балл за каждую строку с двумя или более ";" 
		+1/3 балла если каждая функция умещается на 1 экран
		+1/3 балла если вложенность {} 1, 2, или 3 
		+1/3 балла за разбиение программы на 2 и более раздельно компилируемых файлов и скрипт (makefile или *.bat файл)

	ПРИМЕР
		посещено 6 семинаров				0
		домашние задания 5-5-5-5			+5
		лабораторные работы
			4 из 7
			сданы на 39, 42, 45, и 48 неделе	-1-1-1-1
			проходят все тесты			+5+5+5+5
			максимальные бонусы за оформление	+1+1+1+1
		(0+5-1-1-1-1+5+5+5+5+1+1+1+1)/(1+4+7) = 25/12 --> 3 балла


>>> 1 СЕМЕСТР <<<

ДИФФЕРЕНЦИРОВАННЫЙ ЗАЧЁТ
	Рекомендованная оценка -- число набранных баллов за 1й семестр

>>> 2 СЕМЕСТР <<<

ДОПУСК НА ЭКЗАМЕН
	Обязательно: сдан архиватор файлов на основе метода Хаффмана (лабораторная работа 5 или эквивалент)
	Не рекомендуется допускать до экзамена студентов, набравших 0, 1, 2 балла за 2й семестр

ЭКЗАМЕН 
	3 вопроса – язык Си, алгоритмы, структуры данных -- по 1 баллу за вопрос
	Задача -- 3 балла (или менее, если решение неполное/неоптимальное)
	Дополнительная задача на «отлично» -- 3 балла (или менее, если решение неполное/неоптимальное)
	Рекомендованная оценка
	0-3 балла -- неуд
	4-5 баллов -- удовл
	6-7 баллов -- хор
	8-9 баллов -- отл

>>> ПРИМЕРНЫЕ ТЕМЫ СЕМИНАРОВ 1 СЕМЕСТРА <<<

В семестре 1 отрабатываются в основном навыки алгоритмической декомпозиции
с элементами процедурной декомпозиции
	
Семинары 1, 2, 3 – простые программы с условными операторами, циклами, массивами
	Студенту нужно сдать N экзаменов.
	Даты экзаменов хранятся в массиве int A[N] в порядке возрастания.
	Студента отчисляют за несдачу X экзаменов.
	До какой даты студент не может быть отчислен?

	Найти x такой, что a*x*x+b*x+c=0 для данных a, b, c. Случай a!=0. Случай a=0, b!=0.
	Случай a=0, b=0, c!=0. Случай a=0, b=0, c=0.
        
	Каким должно быть <условие>, чтобы код ниже печатал ”HelloWorld”?
        	if (<условие>)
		printf("Hello");
        	else
		printf("World");
        
	Измените или добавьте один символ, чтобы программа ниже печатала ровно 20 *. Приведите не менее 3 решений.
        	int main()
		{
        		int i, n = 20;
			for (i = 0; i < n; i--)
        		printf("*");
			return 0;
		}
        
	Массив из N элементов заполнен числами от 1 до N – 1, причём все числа, кроме одного, встречаются только один раз.
	Найти число, которое встречается два раза. За один просмотр массива.
        
	В массиве целых чисел каждое значение, кроме одного, встречается дважды.
	Найти число, которое встречается один раз. За один просмотр массива.

	В массиве 2*N целых чисел одно значение повторяется N раз, а остальные N значений различны.
	Найти повторяющееся значение. Массив неупорядочен. За один просмотр.
        
	Массив целых чисел A содержит все значения из массива B (с учётом повторов) и ещё одно значение.
	Найти это значение. Не используя сравнений.
        
	Печать чисел Фибоначчи f(0) = 0, f(1) = 1, f(i+2) = f(i+1)+f(i).
        
	Проверка числа на простоту.
        
	Бинарный поиск в упорядоченном массиве.
        
	Скользящий максимум массива m[0] = a[0], m[1] = max(a[0], a[1]), m[i+2] = max(a[i], a[i+1], a[i+2]).
        
	Быстрая печать всех чисел Хемминга в порядке возрастания (2^k)*(3^l)*(5^m)
        
	Сортировка массива пузырьком.
        
	Разделение четных и нечетных чисел в массиве за один просмотр.
        
	Проверка упорядоченности массива.

	Сортировка массива из 0, 1, 2 подсчетом.

Семинар 4 – перечисление всех перестановок
	Построение перестановки по таблице инверсий

	Вычисление final standings в ходе ТВ трансляции соревнований

	Рекурсивное перечисление перестановок

	TODO -- more problems

Семинар 5 – пирамидальная сортировка и быстрая сортировка Хоара
	Разделение массива на <x и >=x

	Объединение упорядоченных массивов

	Просеивание через пирамиду

	TODO -- more problems

Семинары 6, 7 – строки в языке Си 
	Перевод между СС для целых и вещественных чисел

	Поиск подстроки в строке упрощённым алгоритмом Бойера-Мура

	Проверить, что строка s1 является циклическим сдвигом строки s2, используя стандартные функции.
	Например, "ABCD" является циклическим сдвигом "CDAB" и не является циклическим сдвигом "ACBD".

	Найти минимальный период строки.

	TODO -- more problems

Семинары 8, 9 – структуры, объединения и файлы в языке Си
	Ввести в каталог библиотеки информацию о печатных изданиях:
	книгах, газетах, журналах, а затем по некоторым признакам найти в нем подходящие записи,
	Подсчет частоты встречаемости символов в файле
	Разделение файла на несколько файлов по признаку и т.д.
	Перевернуть файл быстрее, чем за N*N
	Слияние двух упорядоченных файлов в упорядоченный файл

	TODO -- more problems

Семинары 10, 11, 12, 13 – указатели в языке Си
	Освобождение памяти занятой 1-связным списком
	Добавление элемента в 1-связный список
	Проверка цикличности 1-связного списка
	Объединение упорядоченных 1-связных списков
	Найти середину 1-связного списка за один просмотр списка и без изменения значений и/или указателей на следующий элемент
	Добавление элемента в 2-связный список
	Стек – реализация через массив и через список
	Очередь – реализация через массив и через список
	Добавление элемента в дерево двоичного поиска
	Вычисление высоты двоичного дерева

>>> ПРИМЕРНЫЕ ТЕМЫ СЕМИНАРОВ 1 СЕМЕСТРА <<<

В семестре 2 отрабатываются навыки процедурной декомпозиции

Рекомендуется решение задач, аналогичных экзаменационным
